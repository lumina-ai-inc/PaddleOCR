{
    "sourceFile": "tools/test_hubserving.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1724396026591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724396036948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,8 @@\n         r = requests.post(url=args.server_url, headers=headers, data=json.dumps(data))\n         elapse = time.time() - starttime\n         total_time += elapse\n         logger.info(\"Predict time of %s: %.3fs\" % (image_file, elapse))\n-        print(r.json())\n         res = r.json()[\"results\"][0]\n         logger.info(res)\n \n         if args.visualize:\n"
                },
                {
                    "date": 1724396042557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,163 @@\n+# Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+import os\n+import sys\n+\n+__dir__ = os.path.dirname(os.path.abspath(__file__))\n+sys.path.append(__dir__)\n+sys.path.append(os.path.abspath(os.path.join(__dir__, \"..\")))\n+\n+from ppocr.utils.logging import get_logger\n+\n+logger = get_logger()\n+\n+import cv2\n+import numpy as np\n+import time\n+from PIL import Image\n+from ppocr.utils.utility import get_image_file_list\n+from tools.infer.utility import draw_ocr, draw_boxes, str2bool\n+from ppstructure.utility import draw_structure_result\n+from ppstructure.predict_system import to_excel\n+\n+import requests\n+import json\n+import base64\n+\n+\n+def cv2_to_base64(image):\n+    return base64.b64encode(image).decode(\"utf8\")\n+\n+\n+def draw_server_result(image_file, res):\n+    img = cv2.imread(image_file)\n+    image = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))\n+    if len(res) == 0:\n+        return np.array(image)\n+    keys = res[0].keys()\n+    if \"text_region\" not in keys:  # for ocr_rec, draw function is invalid\n+        logger.info(\"draw function is invalid for ocr_rec!\")\n+        return None\n+    elif \"text\" not in keys:  # for ocr_det\n+        logger.info(\"draw text boxes only!\")\n+        boxes = []\n+        for dno in range(len(res)):\n+            boxes.append(res[dno][\"text_region\"])\n+        boxes = np.array(boxes)\n+        draw_img = draw_boxes(image, boxes)\n+        return draw_img\n+    else:  # for ocr_system\n+        logger.info(\"draw boxes and texts!\")\n+        boxes = []\n+        texts = []\n+        scores = []\n+        for dno in range(len(res)):\n+            boxes.append(res[dno][\"text_region\"])\n+            texts.append(res[dno][\"text\"])\n+            scores.append(res[dno][\"confidence\"])\n+        boxes = np.array(boxes)\n+        scores = np.array(scores)\n+        draw_img = draw_ocr(image, boxes, texts, scores, draw_txt=True, drop_score=0.5)\n+        return draw_img\n+\n+\n+def save_structure_res(res, save_folder, image_file):\n+    img = cv2.imread(image_file)\n+    excel_save_folder = os.path.join(save_folder, os.path.basename(image_file))\n+    os.makedirs(excel_save_folder, exist_ok=True)\n+    # save res\n+    with open(os.path.join(excel_save_folder, \"res.txt\"), \"w\", encoding=\"utf8\") as f:\n+        for region in res:\n+            if region[\"type\"] == \"Table\":\n+                excel_path = os.path.join(\n+                    excel_save_folder, \"{}.xlsx\".format(region[\"bbox\"])\n+                )\n+                to_excel(region[\"res\"], excel_path)\n+            elif region[\"type\"] == \"Figure\":\n+                x1, y1, x2, y2 = region[\"bbox\"]\n+                print(region[\"bbox\"])\n+                roi_img = img[y1:y2, x1:x2, :]\n+                img_path = os.path.join(\n+                    excel_save_folder, \"{}.jpg\".format(region[\"bbox\"])\n+                )\n+                cv2.imwrite(img_path, roi_img)\n+            else:\n+                for text_result in region[\"res\"]:\n+                    f.write(\"{}\\n\".format(json.dumps(text_result)))\n+\n+\n+def main(args):\n+    image_file_list = get_image_file_list(args.image_dir)\n+    is_visualize = False\n+    headers = {\"Content-type\": \"application/json\"}\n+    cnt = 0\n+    total_time = 0\n+    for image_file in image_file_list:\n+        img = open(image_file, \"rb\").read()\n+        if img is None:\n+            logger.info(\"error in loading image:{}\".format(image_file))\n+            continue\n+        img_name = os.path.basename(image_file)\n+        # seed http request\n+        starttime = time.time()\n+        data = {\"images\": [cv2_to_base64(img)]}\n+        r = requests.post(url=args.server_url, headers=headers, data=json.dumps(data))\n+        elapse = time.time() - starttime\n+        total_time += elapse\n+        logger.info(\"Predict time of %s: %.3fs\" % (image_file, elapse))\n+        print(r.json())\n+        res = r.json()[\"results\"][0]\n+        logger.info(res)\n+\n+        if args.visualize:\n+            draw_img = None\n+            if \"structure_table\" in args.server_url:\n+                to_excel(res[\"html\"], \"./{}.xlsx\".format(img_name))\n+            elif \"structure_system\" in args.server_url:\n+                save_structure_res(res[\"regions\"], args.output, image_file)\n+            else:\n+                draw_img = draw_server_result(image_file, res)\n+            if draw_img is not None:\n+                if not os.path.exists(args.output):\n+                    os.makedirs(args.output)\n+                cv2.imwrite(\n+                    os.path.join(args.output, os.path.basename(image_file)),\n+                    draw_img[:, :, ::-1],\n+                )\n+                logger.info(\n+                    \"The visualized image saved in {}\".format(\n+                        os.path.join(args.output, os.path.basename(image_file))\n+                    )\n+                )\n+        cnt += 1\n+        if cnt % 100 == 0:\n+            logger.info(\"{} processed\".format(cnt))\n+    logger.info(\"avg time cost: {}\".format(float(total_time) / cnt))\n+\n+\n+def parse_args():\n+    import argparse\n+\n+    parser = argparse.ArgumentParser(description=\"args for hub serving\")\n+    parser.add_argument(\"--server_url\", type=str, required=True)\n+    parser.add_argument(\"--image_dir\", type=str, required=True)\n+    parser.add_argument(\"--visualize\", type=str2bool, default=False)\n+    parser.add_argument(\"--output\", type=str, default=\"./hubserving_result\")\n+    args = parser.parse_args()\n+    return args\n+\n+\n+if __name__ == \"__main__\":\n+    args = parse_args()\n+    main(args)\n"
                },
                {
                    "date": 1724396067563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,8 +116,9 @@\n         elapse = time.time() - starttime\n         total_time += elapse\n         logger.info(\"Predict time of %s: %.3fs\" % (image_file, elapse))\n         print(r.json())\n+        print(args.server_url)\n         res = r.json()[\"results\"][0]\n         logger.info(res)\n \n         if args.visualize:\n@@ -160,166 +161,4 @@\n \n if __name__ == \"__main__\":\n     args = parse_args()\n     main(args)\n-# Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved.\n-#\n-# Licensed under the Apache License, Version 2.0 (the \"License\");\n-# you may not use this file except in compliance with the License.\n-# You may obtain a copy of the License at\n-#\n-#     http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing, software\n-# distributed under the License is distributed on an \"AS IS\" BASIS,\n-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-# See the License for the specific language governing permissions and\n-# limitations under the License.\n-import os\n-import sys\n-\n-__dir__ = os.path.dirname(os.path.abspath(__file__))\n-sys.path.append(__dir__)\n-sys.path.append(os.path.abspath(os.path.join(__dir__, \"..\")))\n-\n-from ppocr.utils.logging import get_logger\n-\n-logger = get_logger()\n-\n-import cv2\n-import numpy as np\n-import time\n-from PIL import Image\n-from ppocr.utils.utility import get_image_file_list\n-from tools.infer.utility import draw_ocr, draw_boxes, str2bool\n-from ppstructure.utility import draw_structure_result\n-from ppstructure.predict_system import to_excel\n-\n-import requests\n-import json\n-import base64\n-\n-\n-def cv2_to_base64(image):\n-    return base64.b64encode(image).decode(\"utf8\")\n-\n-\n-def draw_server_result(image_file, res):\n-    img = cv2.imread(image_file)\n-    image = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))\n-    if len(res) == 0:\n-        return np.array(image)\n-    keys = res[0].keys()\n-    if \"text_region\" not in keys:  # for ocr_rec, draw function is invalid\n-        logger.info(\"draw function is invalid for ocr_rec!\")\n-        return None\n-    elif \"text\" not in keys:  # for ocr_det\n-        logger.info(\"draw text boxes only!\")\n-        boxes = []\n-        for dno in range(len(res)):\n-            boxes.append(res[dno][\"text_region\"])\n-        boxes = np.array(boxes)\n-        draw_img = draw_boxes(image, boxes)\n-        return draw_img\n-    else:  # for ocr_system\n-        logger.info(\"draw boxes and texts!\")\n-        boxes = []\n-        texts = []\n-        scores = []\n-        for dno in range(len(res)):\n-            boxes.append(res[dno][\"text_region\"])\n-            texts.append(res[dno][\"text\"])\n-            scores.append(res[dno][\"confidence\"])\n-        boxes = np.array(boxes)\n-        scores = np.array(scores)\n-        draw_img = draw_ocr(image, boxes, texts, scores, draw_txt=True, drop_score=0.5)\n-        return draw_img\n-\n-\n-def save_structure_res(res, save_folder, image_file):\n-    img = cv2.imread(image_file)\n-    excel_save_folder = os.path.join(save_folder, os.path.basename(image_file))\n-    os.makedirs(excel_save_folder, exist_ok=True)\n-    # save res\n-    with open(os.path.join(excel_save_folder, \"res.txt\"), \"w\", encoding=\"utf8\") as f:\n-        for region in res:\n-            if region[\"type\"] == \"Table\":\n-                excel_path = os.path.join(\n-                    excel_save_folder, \"{}.xlsx\".format(region[\"bbox\"])\n-                )\n-                to_excel(region[\"res\"], excel_path)\n-            elif region[\"type\"] == \"Figure\":\n-                x1, y1, x2, y2 = region[\"bbox\"]\n-                print(region[\"bbox\"])\n-                roi_img = img[y1:y2, x1:x2, :]\n-                img_path = os.path.join(\n-                    excel_save_folder, \"{}.jpg\".format(region[\"bbox\"])\n-                )\n-                cv2.imwrite(img_path, roi_img)\n-            else:\n-                for text_result in region[\"res\"]:\n-                    f.write(\"{}\\n\".format(json.dumps(text_result)))\n-\n-\n-def main(args):\n-    image_file_list = get_image_file_list(args.image_dir)\n-    is_visualize = False\n-    headers = {\"Content-type\": \"application/json\"}\n-    cnt = 0\n-    total_time = 0\n-    for image_file in image_file_list:\n-        img = open(image_file, \"rb\").read()\n-        if img is None:\n-            logger.info(\"error in loading image:{}\".format(image_file))\n-            continue\n-        img_name = os.path.basename(image_file)\n-        # seed http request\n-        starttime = time.time()\n-        data = {\"images\": [cv2_to_base64(img)]}\n-        r = requests.post(url=args.server_url, headers=headers, data=json.dumps(data))\n-        elapse = time.time() - starttime\n-        total_time += elapse\n-        logger.info(\"Predict time of %s: %.3fs\" % (image_file, elapse))\n-        res = r.json()[\"results\"][0]\n-        logger.info(res)\n-\n-        if args.visualize:\n-            draw_img = None\n-            if \"structure_table\" in args.server_url:\n-                to_excel(res[\"html\"], \"./{}.xlsx\".format(img_name))\n-            elif \"structure_system\" in args.server_url:\n-                save_structure_res(res[\"regions\"], args.output, image_file)\n-            else:\n-                draw_img = draw_server_result(image_file, res)\n-            if draw_img is not None:\n-                if not os.path.exists(args.output):\n-                    os.makedirs(args.output)\n-                cv2.imwrite(\n-                    os.path.join(args.output, os.path.basename(image_file)),\n-                    draw_img[:, :, ::-1],\n-                )\n-                logger.info(\n-                    \"The visualized image saved in {}\".format(\n-                        os.path.join(args.output, os.path.basename(image_file))\n-                    )\n-                )\n-        cnt += 1\n-        if cnt % 100 == 0:\n-            logger.info(\"{} processed\".format(cnt))\n-    logger.info(\"avg time cost: {}\".format(float(total_time) / cnt))\n-\n-\n-def parse_args():\n-    import argparse\n-\n-    parser = argparse.ArgumentParser(description=\"args for hub serving\")\n-    parser.add_argument(\"--server_url\", type=str, required=True)\n-    parser.add_argument(\"--image_dir\", type=str, required=True)\n-    parser.add_argument(\"--visualize\", type=str2bool, default=False)\n-    parser.add_argument(\"--output\", type=str, default=\"./hubserving_result\")\n-    args = parser.parse_args()\n-    return args\n-\n-\n-if __name__ == \"__main__\":\n-    args = parse_args()\n-    main(args)\n"
                }
            ],
            "date": 1724396026591,
            "name": "Commit-0",
            "content": "# Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport os\nimport sys\n\n__dir__ = os.path.dirname(os.path.abspath(__file__))\nsys.path.append(__dir__)\nsys.path.append(os.path.abspath(os.path.join(__dir__, \"..\")))\n\nfrom ppocr.utils.logging import get_logger\n\nlogger = get_logger()\n\nimport cv2\nimport numpy as np\nimport time\nfrom PIL import Image\nfrom ppocr.utils.utility import get_image_file_list\nfrom tools.infer.utility import draw_ocr, draw_boxes, str2bool\nfrom ppstructure.utility import draw_structure_result\nfrom ppstructure.predict_system import to_excel\n\nimport requests\nimport json\nimport base64\n\n\ndef cv2_to_base64(image):\n    return base64.b64encode(image).decode(\"utf8\")\n\n\ndef draw_server_result(image_file, res):\n    img = cv2.imread(image_file)\n    image = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))\n    if len(res) == 0:\n        return np.array(image)\n    keys = res[0].keys()\n    if \"text_region\" not in keys:  # for ocr_rec, draw function is invalid\n        logger.info(\"draw function is invalid for ocr_rec!\")\n        return None\n    elif \"text\" not in keys:  # for ocr_det\n        logger.info(\"draw text boxes only!\")\n        boxes = []\n        for dno in range(len(res)):\n            boxes.append(res[dno][\"text_region\"])\n        boxes = np.array(boxes)\n        draw_img = draw_boxes(image, boxes)\n        return draw_img\n    else:  # for ocr_system\n        logger.info(\"draw boxes and texts!\")\n        boxes = []\n        texts = []\n        scores = []\n        for dno in range(len(res)):\n            boxes.append(res[dno][\"text_region\"])\n            texts.append(res[dno][\"text\"])\n            scores.append(res[dno][\"confidence\"])\n        boxes = np.array(boxes)\n        scores = np.array(scores)\n        draw_img = draw_ocr(image, boxes, texts, scores, draw_txt=True, drop_score=0.5)\n        return draw_img\n\n\ndef save_structure_res(res, save_folder, image_file):\n    img = cv2.imread(image_file)\n    excel_save_folder = os.path.join(save_folder, os.path.basename(image_file))\n    os.makedirs(excel_save_folder, exist_ok=True)\n    # save res\n    with open(os.path.join(excel_save_folder, \"res.txt\"), \"w\", encoding=\"utf8\") as f:\n        for region in res:\n            if region[\"type\"] == \"Table\":\n                excel_path = os.path.join(\n                    excel_save_folder, \"{}.xlsx\".format(region[\"bbox\"])\n                )\n                to_excel(region[\"res\"], excel_path)\n            elif region[\"type\"] == \"Figure\":\n                x1, y1, x2, y2 = region[\"bbox\"]\n                print(region[\"bbox\"])\n                roi_img = img[y1:y2, x1:x2, :]\n                img_path = os.path.join(\n                    excel_save_folder, \"{}.jpg\".format(region[\"bbox\"])\n                )\n                cv2.imwrite(img_path, roi_img)\n            else:\n                for text_result in region[\"res\"]:\n                    f.write(\"{}\\n\".format(json.dumps(text_result)))\n\n\ndef main(args):\n    image_file_list = get_image_file_list(args.image_dir)\n    is_visualize = False\n    headers = {\"Content-type\": \"application/json\"}\n    cnt = 0\n    total_time = 0\n    for image_file in image_file_list:\n        img = open(image_file, \"rb\").read()\n        if img is None:\n            logger.info(\"error in loading image:{}\".format(image_file))\n            continue\n        img_name = os.path.basename(image_file)\n        # seed http request\n        starttime = time.time()\n        data = {\"images\": [cv2_to_base64(img)]}\n        r = requests.post(url=args.server_url, headers=headers, data=json.dumps(data))\n        elapse = time.time() - starttime\n        total_time += elapse\n        logger.info(\"Predict time of %s: %.3fs\" % (image_file, elapse))\n        print(r.json())\n        res = r.json()[\"results\"][0]\n        logger.info(res)\n\n        if args.visualize:\n            draw_img = None\n            if \"structure_table\" in args.server_url:\n                to_excel(res[\"html\"], \"./{}.xlsx\".format(img_name))\n            elif \"structure_system\" in args.server_url:\n                save_structure_res(res[\"regions\"], args.output, image_file)\n            else:\n                draw_img = draw_server_result(image_file, res)\n            if draw_img is not None:\n                if not os.path.exists(args.output):\n                    os.makedirs(args.output)\n                cv2.imwrite(\n                    os.path.join(args.output, os.path.basename(image_file)),\n                    draw_img[:, :, ::-1],\n                )\n                logger.info(\n                    \"The visualized image saved in {}\".format(\n                        os.path.join(args.output, os.path.basename(image_file))\n                    )\n                )\n        cnt += 1\n        if cnt % 100 == 0:\n            logger.info(\"{} processed\".format(cnt))\n    logger.info(\"avg time cost: {}\".format(float(total_time) / cnt))\n\n\ndef parse_args():\n    import argparse\n\n    parser = argparse.ArgumentParser(description=\"args for hub serving\")\n    parser.add_argument(\"--server_url\", type=str, required=True)\n    parser.add_argument(\"--image_dir\", type=str, required=True)\n    parser.add_argument(\"--visualize\", type=str2bool, default=False)\n    parser.add_argument(\"--output\", type=str, default=\"./hubserving_result\")\n    args = parser.parse_args()\n    return args\n\n\nif __name__ == \"__main__\":\n    args = parse_args()\n    main(args)\n"
        }
    ]
}